include(`asc.ohm')

  Component [comp] = [[${comp}]]
  Composite [konstant ident body] =
    {{ scopeAdd ('component', _ident._glue ()); }}
    [[FACT composite ${scopeGet ('component')}\n${body}]]
  Leaf [k ident body] =
    {{ scopeAdd ('component', _ident._glue ()); }}
    [[FACT leaf ${scopeGet ('component')}\n${body}]]

    LeafBody [lb inputs outputs objects initially handler rb] =
      [[${inputs}\n${outputs}\n${objects}\n${initially}\n${handler}\n]]

    CompositeBody [lb inputs outputs contains connections rb] =
      [[${inputs}\n${outputs}\n${contains}\n${connections}\n]]
    
      Contains [k lb @other rb] = [[contains {${other} }\n]]
      Connections [k lb @connections rb] = [[connections {\n${connections}\n}]]

      Initially [k lb @code rb] = [[initially { ${code} }]]
      Handler [k lb code rb] = [[handler { ${code} }]]

        OtherComponent [ident inputs outputs] = [[${ident} ${inputs} ${outputs}]]
        Connection [sender receiver] = [[${sender} ${receiver}\n]]

        Sender [rid] = [[${rid}]]
	Receiver [rid] = [[${rid}]]

 relativeIdent [k fid @more] = [[${k}${fid}${more}]]
 relativeIdentMore [k fid] = [[${k}${fid}]]
    
FlatCode [code] = [[${code}]]

MethodCall [fid1 k fid2 @actuals] = [[${fid1}.${fid2}${actuals}]]

Actuals [lp @actuals rp] = [[(${actuals})]]
Actual [fid] = [[${fid}]]

Abort [k] = [[abort]]
HandlerCode [@cases @xelse] = [[${cases}${xelse}]]

Case [rid k @code] = [[${rid} : ${code}]]
Else [k1 k2 @code] = [[_ : ${code}]]

CaseCode [code] = [[${code}]]

MessageSend [k rid e] = [[send ${rid} ${e}]]
Expression [methodCall] = [[${methodCall}]]

Inputs [k lb @rid rb] = [[inputs [ ${rid} \] ]]
Outputs [k lb @rid rb] = [[outputs [ ${rid} \] ]]
Objects [k lb @rid rb] = [[objects [ ${rid} \] ]]

Object [fid k lb @methods rb] = [[${fid} methods [ ${methods} ] ]]

Method [dot fid inparams outparams] = [[.${fid} ${inparams} ${outparams}]]

InputParameters [lt @params] = [[< ${params}]]
OutputParameters [gt @params] = [[> ${params}]]

Parameters [lp @ids rp] = [[(${ids})]]


flatIdent [first @rest] = [[${first}${rest}]]
identFirst [c] = [[${c}]]
identRest [c] = [[${c}]]

keyword [k] = [[${k}]]
bracket [c] = [[${c}]]
misc [c] = [[${c}]]
dotslash [c] = [[__]]
slash [c] = [[_]]
dot [c] = [[_]]
separator [sep] = [[${sep}]]
whitespace [c] = [[${c}]]

space [ws] = [[${ws}]]
